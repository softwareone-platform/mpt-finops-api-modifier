import logging
from unittest.mock import AsyncMock

import pytest

from app.optscale_api.users_api import OptScaleUserAPI

USER_ID = "f0bd0c4a-7c55-45b7-8b58-27740e38789a"
INVALID_USER_ID = "f0bd0c4a-7c55-45b7-8b58-27740e38789k"
ADMIN_API_KEY = "f2312f2b-46h0-4456-o0i9-58e64f2j6725"
EMAIL = "peter.parker@iamspiderman.com"
DISPLAY_NAME = "Spider Man"
PASSWORD = "With great power comes great responsibility"


@pytest.fixture
def optscale_api():
    """Provides a clean instance of OptScaleUserAPI for each test."""
    return OptScaleUserAPI()


@pytest.fixture
def mock_post(mocker, optscale_api):
    """Mock the `post` method in `api_client`."""
    mock_post = mocker.patch.object(optscale_api.api_client, 'post', new=AsyncMock())
    return mock_post


@pytest.fixture
def mock_get(mocker, optscale_api):
    """Mock the `get` method in `api_client`."""
    mock_get = mocker.patch.object(optscale_api.api_client, 'get', new=AsyncMock())
    return mock_get


@pytest.mark.asyncio
class TestOptscaleAPI:

    async def test_create_valid_user(self, optscale_api, mock_post):
        mock_response = {
            "created_at": 1730126521,
            "deleted_at": 0,
            "id": USER_ID,
            "display_name": DISPLAY_NAME,
            "is_active": True,
            "type_id": 1,
            "email": EMAIL,
            "scope_id": None,
            "slack_connected": False,
            "is_password_autogenerated": False,
            "jira_connected": False,
            "token": "valid_jwt_token"
        }
        mock_post.return_value = mock_response

        result = await optscale_api.create_user(email=EMAIL, display_name=DISPLAY_NAME,
                                                password=PASSWORD)

        mock_post.assert_called_once_with(
            endpoint="/auth/v2/users",
            data={"email": EMAIL, "display_name": DISPLAY_NAME, "password": PASSWORD}
        )
        assert result == mock_response, "Expected a valid user creation response"

    async def test_create_duplicate_user(self, optscale_api, mock_post):
        mock_response = {
            "error": {
                "status_code": 409,
                "error_code": "OA0042",
                "reason": f"User {EMAIL} already exists",
                "params": [EMAIL]
            }
        }
        mock_post.return_value = mock_response

        result = await optscale_api.create_user(email=EMAIL, display_name=DISPLAY_NAME,
                                                password=PASSWORD)

        mock_post.assert_called_once_with(
            endpoint="/auth/v2/users",
            data={"email": EMAIL, "display_name": DISPLAY_NAME, "password": PASSWORD}
        )
        assert result == mock_response, "Expected error response for duplicate user creation"

    async def test_create_user_exception_handling(self, optscale_api, mock_post, caplog):
        # Simulate an exception during the user creation process
        mock_post.side_effect = Exception("Test exception")

        with caplog.at_level(logging.ERROR):
            result = await optscale_api.create_user(email=EMAIL, display_name=DISPLAY_NAME,
                                                    password=PASSWORD)

        # Verify the response is None when an exception is raised
        assert result is None, "Expected None when an exception occurs during user creation"
        # Verify the error log entry
        assert "Exception occurred creating a user: Test exception" in caplog.text, \
            "Expected error log for the exception in user creation"

    @pytest.mark.parametrize("user_id, expected_status, expected_reason", [  # noqa: PT006
        (USER_ID, 200, None),
        (INVALID_USER_ID, 404, "User with id f0bd0c4a-7c55-45b7-8b58-27740e38789k not found")
    ])
    async def test_get_user_by_id(self, optscale_api, mock_get, user_id, expected_status,
                                  expected_reason):
        if expected_status == 200:
            mock_response = {
                "created_at": 1730126521,
                "deleted_at": 0,
                "id": user_id,
                "display_name": DISPLAY_NAME,
                "is_active": True,
                "type_id": 1,
                "email": EMAIL,
                "scope_id": None,
                "slack_connected": False,
                "is_password_autogenerated": False,
                "jira_connected": False,
                "scope_name": None
            }
        else:
            mock_response = {
                "error": {
                    "status_code": expected_status,
                    "error_code": "OA0043",
                    "reason": expected_reason,
                    "params": [user_id]
                }
            }

        mock_get.return_value = mock_response

        result = await optscale_api.get_user_by_id(user_id=user_id, admin_api_key=ADMIN_API_KEY)

        mock_get.assert_called_once_with(
            endpoint=f"/auth/v2/users/{user_id}",
            headers={"Secret": ADMIN_API_KEY}
        )
        assert result == mock_response, (f"Expected response for user_id={user_id} "
                                         f"with status {expected_status}")

    async def test_get_user_with_invalid_admin_api_key(self, optscale_api, mock_get):
        mock_response = {
            "error": {
                "status_code": 403,
                "error_code": "OA0006",
                "reason": "Bad secret",
                "params": []
            }
        }
        mock_get.return_value = mock_response

        result = await optscale_api.get_user_by_id(user_id=USER_ID, admin_api_key="invalid_key")

        mock_get.assert_called_once_with(
            endpoint=f"/auth/v2/users/{USER_ID}",
            headers={"Secret": "invalid_key"}
        )
        assert result == mock_response, "Expected 403 response for invalid admin API key"
