from fastapi import APIRouter, Depends
from fastapi import status as http_status
from starlette.responses import JSONResponse

from app import settings
from app.core.auth_jwt_bearer import JWTBearer
from app.core.exceptions import OptScaleAPIResponseError, handle_exception
from app.optscale_api.users_api import OptScaleUserAPI
from app.users.model import CreateUserData, CreateUserResponse

router = APIRouter()


@router.post(
    path="",
    status_code=http_status.HTTP_201_CREATED,
    response_model=CreateUserResponse,
    dependencies=[Depends(JWTBearer())],
)
async def create_user(data: CreateUserData, user_api: OptScaleUserAPI = Depends()):
    """
    Create a FinOps user
    This endpoint allows the creation of a new user by interacting with the OptScale API.
    It returns the created user's details.

    :param data: The input data required to create a user.
    :param user_api: An instance of OptScaleOrgAPI for managing organization operations.
                    Dependency injection via `Depends()`.

    :return: A response model containing the details of the newly created user.
    Example

        {
            "created_at": 1730126521,
            "deleted_at": 0,
            "id": "f0bd0c4a-7c55-45b7-8b58-27740e38789a",
            "display_name": "Spider Man",
            "is_active": true,
            "type_id": 1,
            "email": "peter.parker@iamspiderman.com",
            "scope_id": null,
            "slack_connected": false,
            "is_password_autogenerated": false,
            "jira_connected": false,
            "token": "token_here"
      }

    This Endpoint, returns a formatted error object like this one, as a result of
        each exception.
        {
            "detail": {
                "type": "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.3",
                "title": "Error response from OptScale",
                "status": 403,
                "traceId": "c4bd62b3fe154456af99380796fb669c",
                "errors": {
                    "reason": "Oh no, I made a mistake!"
                }
            }
        }
    :dependencies:
        JWTBearer: Ensures that the request is authenticated using a valid JWT.
    """
    try:
        response = await user_api.create_user(
            email=str(data.email),
            display_name=data.display_name,
            password=data.password,
            admin_api_key=settings.admin_token,
            verified=True,
        )
        return JSONResponse(
            status_code=response.get("status_code", http_status.HTTP_201_CREATED),
            content=response.get("data", {}),
        )

    except OptScaleAPIResponseError as error:
        handle_exception(error=error)
