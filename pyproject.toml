[project]
name = "ffc-finops-api-modifier"
version = "0.1.0"
description = "SWO FinOps For Cloud API Modifier"
authors = [
    {name = "SoftwareOne AG"},
]
license = {file = "LICENSE.txt"}
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.12,<4"
dependencies = [
    "fastapi[standard]==0.115.*",
    "pydantic[email]==2.10.*",
    "python-dotenv==1.0.*",
    "pydantic-settings==2.6.*",
    "httpx==0.28.*",
    "pyjwt==2.10.*",
    "currency-codes==23.6.*",
    "python-json-logger==2.0.*",
    "uvicorn[standard]==0.32.*",
    "uvloop==0.21.*",
    "uvicorn-worker==0.2.*",
]

[tool.uv]
dev-dependencies = [
    "pydevd>=3.2.2,<4",
    "ipdb>=0.13,<1",
    "mypy>=1.8,<2",
    "pre-commit>=4.0.1,<5",
    "pytest>=8.3.3,<9",
    "pytest-asyncio>=0.24.0,<1",
    "pytest-mock>=3.14.0,<4",
    "pytest-cov>=6.0.0,<7",
    "pytest-deadfixtures>=2.2,<3",
    "ruff>=0.3,<1",
    "bandit>=1.8.0,<2",
    "ipython>=8.30.0,<9",
]

[tool.pytest.ini_options]
testpaths = "tests"
pythonpath = "."
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
addopts = "--cov=app --cov-report=term-missing --cov-report=html --cov-report=xml"
cache_dir = ".cache/pytest"

[tool.coverage.run]
branch = true
relative_files = true
omit = [
    "app/core/logging_config.py",
    "app/core/models.py",
    "*/tests/*",
    "app/utils/database/init_db.py",
    "app/datasources/*",
    "app/router/api_v1/endpoints.py",
    "init_db.py",
    "app/main.py"
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "pragma: no branch"
]

[tool.ruff]
extend-exclude = [".devcontainer"]
output-format = "full"
cache-dir = ".cache/ruff"

[tool.ruff.lint]

select = [
    "E",  # w errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade,
    "PT",  # flake8-pytest-style
    "T10",  # flake8-debugger
    # enable when fixed "G", # flake8-logging-format
]
ignore = [
    "PT001", # Use `@pytest.fixture()` over `@pytest.fixture`
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "PT023", # @pytest.mark.parametrize` is missing required arguments
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
]

[tool.ruff.lint.pycodestyle]
max-line-length = 100

[tool.mypy]
warn_no_return = false
ignore_missing_imports = true
cache_dir = ".cache/mypy"

[tool.bandit]
exclude_dirs = ["tests", ".venv"]
